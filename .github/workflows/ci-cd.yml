name: CI/CD Pipeline

on:
  push:
    branches: [master, main, dev, staging, feature/*]
  pull_request:
    branches: [master, main, dev, staging]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Debug DVC setup
      run: |
        echo "=== 调试信息 ==="
        echo "当前目录: $(pwd)"
        echo "目录内容:"
        ls -la
        echo "DVC 版本:"
        dvc --version || echo "DVC 未安装"
        echo "Python 版本:"
        python --version
        
    - name: Install DVC with specific version
      run: |
        pip install "dvc[http]"==3.0.0  # 尝试特定版本
        
    - name: Configure DVC step by step
      run: |
        # 移除可能存在的旧配置
        dvc remote remove origin || true
        
        # 添加远程
        dvc remote add origin https://dagshub.com/IchimaruGin003/texture-classification-project.dvc
        echo "远程添加完成"
        
        # 配置认证
        dvc remote modify origin --local auth basic
        dvc remote modify origin --local user ${{ secrets.DAGSHUB_USERNAME }}
        dvc remote modify origin --local password ${{ secrets.DAGSHUB_TOKEN }}
        echo "认证配置完成"
        
        # 设为默认远程
        dvc remote default origin
        echo "设为默认远程完成"
        
        # 显示最终配置
        echo "最终配置:"
        cat .dvc/config
        
    - name: Pull data with detailed logging
      run: |
        echo "开始 DVC pull..."
        dvc pull --verbose
        echo "DVC pull 完成状态: $?"

    - name: Install project and dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .  # 关键：以可编辑模式安装项目
        pip install black ruff pytest pytest-cov
    
    - name: Run tests
      run: |
        python -m pytest tests/ -v --cov=src --cov-report=xml
    
    - name: Code formatting check with Black
      run: |
        black --check src/ tests/
    
    - name: Linting with Ruff
      run: |
        ruff check src/ tests/

  build-staging:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/staging' || github.ref == 'refs/heads/dev'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Build Staging Docker image
      run: |
        docker build -t texture-classification:staging .
    
    - name: Test Staging Docker image
      run: |
        docker run --rm texture-classification:staging --environment staging --help

  build-production:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Build Production Docker image
      run: |
        docker build -t texture-classification:production .
    
    - name: Test Production Docker image
      run: |
        docker run --rm texture-classification:production --environment production --help