name: CI/CD Pipeline

on:
  push:
    branches: [master, main, dev, staging, feature/*]
  pull_request:
    branches: [master, main, dev, staging]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install DVC and dependencies
      run: |
        python -m pip install --upgrade pip
        pip install dvc dvc-http
        pip install -e .
        pip install black ruff pytest pytest-cov
    
    - name: Debug - Check current DVC config
      run: |
        echo "=== 当前目录结构 ==="
        ls -la
        echo "=== DVC 配置文件 ==="
        cat .dvc/config || echo "没有.dvc/config文件"
        echo "=== 检查DVC状态 ==="
        dvc status || echo "DVC状态检查失败"
    
    - name: Configure DVC for DagsHub
      run: |
        # 移除现有远程（如果有）
        dvc remote remove origin || true
        # 添加新的远程配置
        dvc remote add origin https://dagshub.com/IchimaruGin003/texture-classification-project.dvc
        dvc remote modify origin --local auth basic
        dvc remote modify origin --local user ${{ secrets.DAGSHUB_USERNAME }}
        dvc remote modify origin --local password ${{ secrets.DAGSHUB_TOKEN }}
        # 验证配置
        dvc remote list
        dvc remote get-url origin
    
    - name: Pull data with DVC
      run: |
        dvc pull -v data/raw_data/
    
    - name: Debug - Check downloaded data
      run: |
        echo "数据目录内容:"
        ls -la data/raw_data/ || echo "raw_data目录不存在"
        find data/raw_data/ -name "*.png" -o -name "*.jpg" | head -10
    
    - name: Run tests
      run: |
        python -m pytest tests/ -v --cov=src --cov-report=xml
    
    - name: Code formatting check with Black
      run: |
        black --check src/ tests/
    
    - name: Linting with Ruff
      run: |
        ruff check src/ tests/

  build-staging:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/staging' || github.ref == 'refs/heads/dev'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Build Staging Docker image
      run: |
        docker build -t texture-classification:staging .
    
    - name: Test Staging Docker image
      run: |
        docker run --rm texture-classification:staging --environment staging --help

  build-production:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Build Production Docker image
      run: |
        docker build -t texture-classification:production .
    
    - name: Test Production Docker image
      run: |
        docker run --rm texture-classification:production --environment production --help